{"version":3,"sources":["reducers/todos.js","actions/index.js","reducers/visibilityFilter.js","reducers/idCounter.js","reducers/index.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/Header/index.js","components/Link.js","containers/FilterLink.js","components/Footer.js","dnd/ItemTypes.js","dnd/Dustbin.js","dnd/DragSource.js","dnd/DnDBoard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["todos","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","id","text","completed","map","todo","objectSpread","VisibilityFilters","visibilityFilter","filter","idCounter","combineReducers","connect","_ref","dispatch","input","react_default","a","createElement","onSubmit","e","preventDefault","value","trim","autoFocus","ref","node","Todo","onClick","style","textDecoration","TodoList","toggleTodo","components_Todo","assign","key","getVisibleTodos","t","Error","Container","styled","header","_templateObject","H1","h1","_templateObject2","Header","props","children","src","logo","className","alt","Link","active","disabled","marginLeft","ownProps","Footer","FilterLink","ItemTypes","height","width","marginRight","marginBottom","color","padding","textAlign","fontSize","lineHeight","float","Dustbin","_this$props","this","canDrop","isOver","isActive","backgroundColor","connectDropTarget","react","React","DropTarget","drop","name","monitor","dropTarget","cardStyle","border","borderRadius","DragSource","beginDrag","endDrag","component","didDrop","getItem","getDropResult","connectDragSource","dragSource","isDragging","opacity","cursor","DnDBoard","lib","backend","HTML5Backend","dnd_Dustbin","div","App_templateObject","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeInputText","event","setState","target","App_Container","components_Header","containers_AddTodo","VisibleTodoList","components_Footer","PureComponent","Boolean","window","location","hostname","match","persistConfig","blacklist","storage","persistedReducer","persistReducer","rootReducer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","es","integration_react","loading","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.605bbb4a.chunk.js","sourcesContent":["const todos = (state = [], action) => {\n    switch (action.type) {\n    case 'ADD_TODO':\n        return [\n            ...state,\n            {\n                id: action.id,\n                text: action.text,\n                completed: false\n            }\n        ];\n    case 'TOGGLE_TODO':\n        return state.map(\n            todo =>\n                todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n        );\n    default:\n        return state;\n    }\n};\n\nexport default todos;\n","export const addTodo = (id, text) => ({\n    type: 'ADD_TODO',\n    id: id,\n    text\n});\n\nexport const setVisibilityFilter = filter => ({\n    type: 'SET_VISIBILITY_FILTER',\n    filter\n});\n\nexport const toggleTodo = id => ({\n    type: 'TOGGLE_TODO',\n    id\n});\n\nexport const VisibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\n};\n","import { VisibilityFilters } from '../actions';\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\n    switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n        return action.filter;\n    default:\n        return state;\n    }\n};\n\nexport default visibilityFilter;\n","const idCounter = (state = 1, action) => {\n    switch (action.type) {\n    case 'ADD_TODO':\n        return state + 1;\n    default:\n        return state;\n    }\n};\n\nexport default idCounter;\n","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\nimport idCounter from './idCounter';\n\nexport default combineReducers({\n    todos,\n    visibilityFilter,\n    idCounter\n});\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions';\n\ntype Action = {+type: string};\ntype Dispatch = (action: Action) => any\ntype Props = {\n    dispatch: Dispatch,\n    idCounter: number\n};\n\nconst AddTodo = ({ idCounter, dispatch }:Props) => {\n    let input = {};\n\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    if (!input.value.trim()) {\n                        return;\n                    }\n                    dispatch(addTodo(idCounter, input.value));\n                    input.value = '';\n                }}\n            >\n                <input autoFocus ref={node => (input = node)} />\n                <button type=\"submit\">Add Todo</button>\n            </form>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => {\n    return { idCounter: state.idCounter };\n};\n\nexport default connect(mapStateToProps)(AddTodo);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Todo = ({ onClick, completed, text }) => (\n    <li\n        onClick={onClick}\n        style={{\n            textDecoration: completed ? 'line-through' : 'none'\n        }}\n    >\n        {text}\n    </li>\n);\n\nTodo.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, toggleTodo }) => (\n    <ul>\n        {todos.map(todo => (\n            <Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} />\n        ))}\n    </ul>\n);\n\nTodoList.propTypes = {\n    todos: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            completed: PropTypes.bool.isRequired,\n            text: PropTypes.string.isRequired\n        }).isRequired\n    ).isRequired,\n    toggleTodo: PropTypes.func.isRequired\n};\n\nexport default TodoList;\n","import { connect } from 'react-redux';\nimport { toggleTodo } from '../actions';\nimport TodoList from '../components/TodoList';\nimport { VisibilityFilters } from '../actions';\n\nconst getVisibleTodos = (todos, filter) => {\n    switch (filter) {\n    case VisibilityFilters.SHOW_ALL:\n        return todos;\n    case VisibilityFilters.SHOW_COMPLETED:\n        return todos.filter(t => t.completed);\n    case VisibilityFilters.SHOW_ACTIVE:\n        return todos.filter(t => !t.completed);\n    default:\n        throw new Error('Unknown filter: ' + filter);\n    }\n};\n\nconst mapStateToProps = state => ({\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    toggleTodo: id => dispatch(toggleTodo(id))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TodoList);\n","// @flow\nimport React from 'react';\nimport styled from 'styled-components';\nimport logo from '../../logo.svg';\n\ntype Child = string | Object;\ntype Props = {\n    children: ?Child,\n    name: ?string,\n    style: ?Object,\n    label: ?string\n};\n\nconst Header = (props:Props) => {\n    const {children, style} = props;\n    return (\n        <Container style={style}>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            {children}\n            <H1>Todo List</H1>\n        </Container>\n    );\n};\n\nconst Container = styled.header`\n  background-color: #282c34;\n    display: flex;\n    flex-direction: row;\n    height: 50px;\n`;\n\nconst H1 = styled.h1`\n    color: #61dafb;\n    margin: 0;\n    line-height: 50px;\n`;\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Link = ({ active, children, onClick }) => (\n    <button\n        onClick={onClick}\n        disabled={active}\n        style={{\n            marginLeft: '4px'\n        }}\n    >\n        {children}\n    </button>\n);\n\nLink.propTypes = {\n    active: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nexport default Link;\n","import { connect } from 'react-redux';\nimport { setVisibilityFilter } from '../actions';\nimport Link from '../components/Link';\n\nconst mapStateToProps = (state, ownProps) => ({\n    active: ownProps.filter === state.visibilityFilter\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Link);\n","import React from 'react';\nimport FilterLink from '../containers/FilterLink';\nimport { VisibilityFilters } from '../actions';\n\nconst Footer = () => (\n    <div>\n        <span>Show: </span>\n        <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n        <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n        <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n    </div>\n);\n\nexport default Footer;\n","export default {\n    BOX: 'box',\n    CARD: 'card',\n};\n","import * as React from 'react';\nimport {\n    DropTarget,\n    DropTargetConnector,\n    DropTargetMonitor,\n    ConnectDropTarget,\n} from 'react-dnd';\nimport ItemTypes from './ItemTypes';\n\nconst style: React.CSSProperties = {\n    height: '12rem',\n    width: '12rem',\n    marginRight: '1.5rem',\n    marginBottom: '1.5rem',\n    color: 'white',\n    padding: '1rem',\n    textAlign: 'center',\n    fontSize: '1rem',\n    lineHeight: 'normal',\n    float: 'left',\n};\n\nconst boxTarget = {\n    drop() {\n        return { name: 'Dustbin' };\n    },\n};\n\nexport interface DustbinProps {\n    canDrop: boolean,\n    isOver: boolean,\n    connectDropTarget: ConnectDropTarget,\n}\n\nclass Dustbin extends React.Component<DustbinProps> {\n    render() {\n        const { canDrop, isOver, connectDropTarget } = this.props;\n        const isActive = canDrop && isOver;\n\n        let backgroundColor = '#222';\n        if (isActive) {\n            backgroundColor = 'darkgreen';\n        } else if (canDrop) {\n            backgroundColor = 'darkkhaki';\n        }\n\n        return connectDropTarget(\n            <div style={{ ...style, backgroundColor }}>\n                {isActive ? 'Release to drop' : 'Drag a box here'}\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget(\n    ItemTypes.CARD,\n    boxTarget,\n    (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop(),\n    }),\n)(Dustbin);\n","import React from 'react';\nimport { DragSource } from 'react-dnd';\nimport ItemTypes from './ItemTypes';\n\n// Drag sources and drop targets only interact\n// if they have the same string type.\n// You want to keep types in a separate file with\n// the rest of your app's constants.\n\nconst cardStyle: React.CSSProperties = {\n    fontSize: 28,\n    border: '1px solid #000',\n    borderRadius: '8px',\n};\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst cardSource = {\n    beginDrag(props) {\n        // Return the data describing the dragged item\n        const item = { id: props.id };\n        return item;\n    },\n\n    endDrag(props, monitor, component) {\n        if (!monitor.didDrop()) {\n            return;\n        }\n\n        // When dropped on a compatible target, do something\n        const item = monitor.getItem();\n        const dropResult = monitor.getDropResult();\n        // CardActions.moveCardToList(item.id, dropResult.listId);\n    }\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect, monitor) {\n    return {\n        // Call this function inside render()\n        // to let React DnD handle the drag events:\n        connectDragSource: connect.dragSource(),\n        // You can ask the monitor about the current drag state:\n        isDragging: monitor.isDragging()\n    };\n}\n\nfunction Card(props) {\n    // Your component receives its own props as usual\n    const { id } = props;\n\n    // These two props are injected by React DnD,\n    // as defined by your `collect` function above:\n    const { isDragging, connectDragSource } = props;\n\n    return connectDragSource(\n        <div\n            style={{\n                ...cardStyle,\n                opacity: isDragging ? 0.5 : 1,\n                cursor: isDragging ? 'grabbing' : 'grab',\n            }}\n        >\n            I am a draggable card number {id}\n            {isDragging && ' (and I am being dragged now)'}\n        </div>\n    );\n}\n\n// Export the wrapped version\nexport default DragSource(ItemTypes.CARD, cardSource, collect)(Card);\n","import React from 'react';\nimport { DragDropContextProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport Dustbin from './Dustbin';\nimport DragSource from './DragSource';\n\nexport default function DnDBoard() {\n    return (\n        <DragDropContextProvider backend={HTML5Backend}>\n            <DragSource />\n            <Dustbin />\n        </DragDropContextProvider>\n    );\n}\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport AddTodo from './containers/AddTodo';\nimport VisibleTodoList from './containers/VisibleTodoList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport DnDBoard from './dnd/DnDBoard';\n\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\n// const Input = styled.input`\n//     flex: 1;\n//     font-size: 20px;\n//     outline: none;\n//     padding: 0;\n//     line-height: 2.4rem;\n// `;\n\nclass App extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        // this.inputRef = React.createRef();\n\n        this.state = {\n            text: '',\n        };\n    }\n\n    componentDidMount() {\n        // this.inputRef.current.focus();\n    }\n\n    onChangeInputText = event =>\n        this.setState({text: event.target.value});\n\n    render() {\n        return (\n            <Container>\n                <Header />\n                {/*<Input\n                    type=\"text\"\n                    ref={this.inputRef}\n                    placeholder=\"your todo text\"\n                    value={this.state.text}\n                    onChange={this.onChangeInputText}\n                    // onFocus={this.handleInputFocus}\n                    // onBlur={this.handleInputBlur}\n                />*/}\n                <span>{this.state.text}</span>\n                <AddTodo />\n                <VisibleTodoList />\n                <Footer />\n                <DnDBoard />\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from './reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst persistConfig = {\n    blacklist: ['todos', 'idCounter'],\n    key: 'root',\n    storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(\n    persistedReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n/* eslint-enable */\n\nlet persistor = persistStore(store);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <App />\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}