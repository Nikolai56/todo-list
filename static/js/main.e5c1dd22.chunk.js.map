{"version":3,"sources":["logo.svg","reducers/todos.js","actions/index.js","reducers/visibilityFilter.js","reducers/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","todos","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","id","text","completed","map","todo","objectSpread","VisibilityFilters","visibilityFilter","filter","combineReducers","Container","styled","header","_templateObject","H1","h1","_templateObject2","Header","props","children","style","react_default","a","createElement","src","logo","className","alt","div","App_templateObject","Input","input","App_templateObject2","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeInputText","event","setState","target","value","inputRef","React","createRef","current","focus","App_Container","components_Header","ref","placeholder","onChange","PureComponent","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qMCqBzBC,EArBD,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpC,OAAQC,EAAOC,MACb,IAAK,WACH,SAAAC,OAAAC,OAAAC,EAAA,EAAAD,CACKP,GADL,CAEE,CACES,GAAIL,EAAOK,GACXC,KAAMN,EAAOM,KACbC,WAAW,KAGjB,IAAK,cACH,OAAOX,EAAMY,IACX,SAAAC,GAAI,OACFA,EAAKJ,KAAOL,EAAOK,GAAnBF,OAAAO,EAAA,EAAAP,CAAA,GAA6BM,EAA7B,CAAmCF,WAAYE,EAAKF,YAAcE,IAExE,QACE,OAAOb,ICAAe,EACC,WCPCC,EATU,WAAgD,IAA/ChB,EAA+CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvCc,EAA4BX,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrE,OAAQC,EAAOC,MACX,IAAK,wBACD,OAAOD,EAAOa,OAClB,QACI,OAAOjB,ICHJkB,cAAgB,CAC3BnB,QACAiB,8YCOJ,IAWMG,EAAYC,IAAOC,OAAVC,KAOTC,EAAKH,IAAOI,GAAVC,KAMOC,EAxBA,SAACC,GAAgB,IACrBC,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,MACjB,OACIC,EAAAC,EAAAC,cAACb,EAAD,CAAWU,MAAOA,GACdC,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,SACxCR,EACDE,EAAAC,EAAAC,cAACT,EAAD,yUCdZ,IAAMJ,EAAYC,IAAOiB,IAAVC,KAKTC,EAAQnB,IAAOoB,MAAVC,KA8CIC,cApCX,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAApC,OAAAqC,EAAA,EAAArC,CAAAsC,KAAAH,IACfC,EAAApC,OAAAuC,EAAA,EAAAvC,CAAAsC,KAAAtC,OAAAwC,EAAA,EAAAxC,CAAAmC,GAAAM,KAAAH,KAAMlB,KAaVsB,kBAAoB,SAAAC,GAAK,OACrBP,EAAKQ,SAAS,CAACzC,KAAMwC,EAAME,OAAOC,SAZlCV,EAAKW,SAAWC,IAAMC,YAEtBb,EAAK3C,MAAQ,CACTU,KAAM,IANKiC,mFAWfE,KAAKS,SAASG,QAAQC,yCAOtB,OACI5B,EAAAC,EAAAC,cAAC2B,EAAD,KACI7B,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAACO,EAAD,CACIlC,KAAK,OACLwD,IAAKhB,KAAKS,SACVQ,YAAY,iBACZT,MAAOR,KAAK7C,MAAMU,KAClBqD,SAAUlB,KAAKI,oBAInBnB,EAAAC,EAAAC,cAAA,YAAOa,KAAK7C,MAAMU,cA/BhBsD,iBCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,YAAYC,GAE1BC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUL,MAAOA,GAC7BxC,EAAAC,EAAAC,cAAC4C,EAAD,OACSC,SAASC,eAAe,SDoH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e5c1dd22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const todos = (state = [], action) => {\n    switch (action.type) {\n    case 'ADD_TODO':\n        return [\n            ...state,\n            {\n                id: action.id,\n                text: action.text,\n                completed: false\n            }\n        ];\n    case 'TOGGLE_TODO':\n        return state.map(\n            todo =>\n                todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n        );\n    default:\n        return state;\n    }\n};\n\nexport default todos;\n","let nextTodoId = 0;\nexport const addTodo = text => ({\n    type: 'ADD_TODO',\n    id: nextTodoId++,\n    text\n});\n\nexport const setVisibilityFilter = filter => ({\n    type: 'SET_VISIBILITY_FILTER',\n    filter\n});\n\nexport const toggleTodo = id => ({\n    type: 'TOGGLE_TODO',\n    id\n});\n\nexport const VisibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\n};\n","import { VisibilityFilters } from '../actions';\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\n    switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n        return action.filter;\n    default:\n        return state;\n    }\n};\n\nexport default visibilityFilter;\n","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nexport default combineReducers({\n    todos,\n    visibilityFilter\n});\n","// @flow\nimport React from 'react';\nimport styled from 'styled-components';\nimport logo from '../../logo.svg';\n\ntype Child = string | Object;\ntype Props = {\n    children: ?Child,\n    name: ?string,\n    style: ?Object,\n    label: ?string\n};\n\nconst Header = (props:Props) => {\n    const {children, style} = props;\n    return (\n        <Container style={style}>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            {children}\n            <H1>Todo List</H1>\n        </Container>\n    );\n};\n\nconst Container = styled.header`\n  background-color: #282c34;\n    display: flex;\n    flex-direction: row;\n    height: 50px;\n`;\n\nconst H1 = styled.h1`\n    color: #61dafb;\n    margin: 0;\n    line-height: 50px;\n`;\n\nexport default Header;\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport Header from './components/Header';\n\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Input = styled.input`\n    border: none;\n    flex: 1;\n    font-size: 20px;\n    outline: none;\n    padding: 0;\n    line-height: 2.4rem;\n`;\n\nclass App extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.inputRef = React.createRef();\n\n        this.state = {\n            text: '',\n        };\n    }\n\n    componentDidMount() {\n        this.inputRef.current.focus();\n    }\n\n    onChangeInputText = event =>\n        this.setState({text: event.target.value});\n\n    render() {\n        return (\n            <Container>\n                <Header />\n                <Input\n                    type=\"text\"\n                    ref={this.inputRef}\n                    placeholder=\"your todo text\"\n                    value={this.state.text}\n                    onChange={this.onChangeInputText}\n                    // onFocus={this.handleInputFocus}\n                    // onBlur={this.handleInputBlur}\n                />\n                <span>{this.state.text}</span>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}